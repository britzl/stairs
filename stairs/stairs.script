local STEP_X = 8
local STEP_Y = 1
local STEP_Z = 2

local STEPS = 12

local DIRECTION = vmath.vector3(0, STEP_Y, -STEP_Z)

local function set_random_spike_position(spike)
	local spike_pos = go.get_position(spike)
	-- STEP_X is width of a step
	-- math.random() gives value between 0.0 and 1.0
	-- (math.random() - 0.5) gives value between -0.5 and 0.5
	-- (math.random() - 0.5) * STEP_X gives a value which covers the entire step all the way to the edge
	-- (math.random() - 0.5) * STEP_X * 0.8 leaves a little margin at the edges of the stairs
	spike_pos.x = (math.random() - 0.5) * STEP_X * 0.8
	go.set_position(spike_pos, spike)
end

function init(self)
	-- "seed" the random number generator (used for randomized spike positions)
	math.randomseed(os.time())

	msg.post(".", "acquire_input_focus")			-- tell the engine this script wants to receive user input
	msg.post("@render:", "use_camera_projection")	-- tell the render script to use the projection from the camera
	msg.post("camera", "acquire_camera_focus")		-- activate the camera

	-- steps are stored here for later use in update()
	self.steps = {}

	-- create steps
	for i=1,STEPS do
		-- create staircase step objects and position them according to the size of the steps
		local pos = DIRECTION * i
		local ids = collectionfactory.create("#stepfactory", pos)

		-- get the created game objects
		local root = ids[hash("/root")]
		local spike = ids[hash("/spike")]
		local step = ids[hash("/step")]

		-- save reference to the step so that we can move it in update
		self.steps[i] = {
			root = root,
			spike = spike
		}

		-- initial random spike position
		set_random_spike_position(spike)

		-- tint the models
		go.set(msg.url(nil, spike, "model"), "tint", vmath.vector4(2,0,0,1))
		go.set(msg.url(nil, step, "model"), "tint", vmath.vector4(0,2,0,1))
	end
end


function update(self, dt)
	-- move each step and reset position to above top of screen if outside of view
	for i,step in ipairs(self.steps) do
		local pos = go.get_position(step.root)
		pos = pos - DIRECTION * dt

		-- reset position of step and set new random spike position?
		if pos.y < 0 then
			pos = pos + DIRECTION * STEPS
			set_random_spike_position(step.spike)
		end

		go.set_position(pos, step.root)
	end
end