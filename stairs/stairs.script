local DISPLAY_WIDTH = tonumber(sys.get_config("display.width"))

-- size of a step
local STEP_X = 7
local STEP_Y = 0.7
local STEP_Z = 3

-- number of steps to spawn
local STEPS = 14

-- the direction vector used when arranging the steps on init and also moving on update()
local DIRECTION = vmath.vector3(0, STEP_Y, -STEP_Z)

local BALL_COLOR  = vmath.vector4(0.2, 0.2, 0.6, 1)
local SPIKE_COLOR = vmath.vector4(0.2, 0.2, 0.6, 1)
local BONUS_COLOR = vmath.vector4(1.0, 1.0, 0.2, 1.5)

-- game state
local PLAYING = false
local SPEED = 2
local TIME = 0
local SCORE = 0

-- utility function to clamp a value to within a lower and upper bound
local function clamp(v, min, max)
	if v < min then return min end
	if v > max then return max end
	return v
end

local function update_score(new_score)
	SCORE = new_score
	label.set_text("score#label", tostring(SCORE))
end

local function increase_score()
	SCORE = SCORE + 1
	label.set_text("score#label", tostring(SCORE))
end

local function disable_spikes_and_bonuses(spikes, bonuses)
	-- disable all spikes and bonuses
	for i=1,#spikes do
		msg.post(spikes[i], "disable")
	end
	for i=1,#bonuses do
		msg.post(bonuses[i], "disable")
	end
end

local function enable_random_spikes_and_bonues(spikes, bonuses)
	disable_spikes_and_bonuses(spikes, bonuses)
	
	-- enable a few spikes
	local count = clamp(math.random(1, 1 + math.ceil(TIME * 0.05)), 1, 8)
	for i=1,count do
		msg.post(spikes[math.random(1, #spikes)], "enable")
	end

	-- enable one bonus and disable any spike that happens to be in the same location
	local bonus = math.random(1, #bonuses)
	msg.post(spikes[bonus], "disable")
	msg.post(bonuses[bonus], "enable")
end

local function start_game(self)
	PLAYING = true
	msg.post("instructions", "disable")
	go.animate("ball", "position.y", go.PLAYBACK_LOOP_PINGPONG, 2, go.EASING_INQUAD, 1.0 / SPEED)
end

local function reset_step(step, pos)
	-- reset position of step and set new random spike position?
	go.set_position(pos, step.root)

	step.moving = TIME * 0.01 > math.random()

	local r = clamp(0.5 + math.sin(math.rad(TIME * 2.49 % 360)), 0.5, 1.0)
	local g = clamp(0.4 + math.cos(math.rad(TIME * 2.91 % 360)), 0.4, 1.0)
	local b = clamp(0.6 + math.sin(math.rad(TIME * 4.13 % 360)), 0.6, 1.0)
	local a = (TIME == 0) and 1 or 0
	local color = vmath.vector4(r, g, b, a)
	go.set(msg.url(nil, step.step, "model"), "tint", color)
	go.animate(msg.url(nil, step.step, "model"), "tint.w", go.PLAYBACK_ONCE_FORWARD, 1.0, go.EASING_OUTQUAD, 0.9)
	enable_random_spikes_and_bonues(step.spikes, step.bonuses)
end

local function reset_game(self)
	PLAYING = false
	TIME = 0
	update_score(0)
	msg.post("instructions", "enable")

	-- get the ball and bounce it
	go.cancel_animations("ball", "position.y")
	go.set_position(vmath.vector3(0, 4, -7), "ball")

	-- initial random spike and bonus positions
	for i=1,STEPS do
		local step = self.steps[i]
		local pos = DIRECTION * i
		reset_step(step, pos)
	end
	-- disable spikes and bonuses on the first few steps
	for i=1,4 do
		local step = self.steps[i]
		disable_spikes_and_bonuses(step.spikes, step.bonuses)
	end
end

function init(self)
	-- "seed" the random number generator (used for randomized spike positions)
	math.randomseed(os.time())

	msg.post(".", "acquire_input_focus")			-- tell the engine this script wants to receive user input
	msg.post("@render:", "use_camera_projection")	-- tell the render script to use the projection from the camera
	msg.post("camera", "acquire_camera_focus")		-- activate the camera

	-- get the ball, color it and bounce it
	local ball = hash("/ball")
	go.set(msg.url(nil, ball, "model"), "tint", BALL_COLOR)
	
	-- steps are stored here for later use in update()
	self.steps = {}

	-- create steps
	for i=1,STEPS do
		-- create staircase step objects
		local ids = collectionfactory.create("#stepfactory")

		-- get all spikes, apply color
		local spikes = {}
		for i=1,8 do
			local spike = ids[hash("/spike"..i)]
			go.set(msg.url(nil, spike, "model"), "tint", SPIKE_COLOR)
			spikes[i] = spike
		end
		-- get all bonuses, apply color
		local bonuses = {}
		for i=1,8 do
			local bonus = ids[hash("/bonus"..i)]
			go.set(msg.url(nil, bonus, "model"), "tint", BONUS_COLOR)
			bonuses[i] = bonus
		end

		-- save game object references for access in update()
		self.steps[i] = {
			index = i,
			root = ids[hash("/root")], -- root game object (moving in update)
			step = ids[hash("/step")], -- step game object with the model
			spikes = spikes,
			bonuses = bonuses
		}
	end

	reset_game(self)
end

function update(self, dt)
	if not PLAYING then return end

	TIME = TIME + dt

	-- move each step and reset position to above top of screen if outside of view
	for i,step in ipairs(self.steps) do
		local pos = go.get_position(step.root)
		pos = pos - DIRECTION * SPEED * dt
		if step.moving then
			pos.x = 3 * math.sin(math.rad((step.index * 70 + TIME * 20) % 360))
		end
		if pos.y < -1 then
			pos.x = 0
			pos = pos + DIRECTION * STEPS
			reset_step(step, pos)
		else
			go.set_position(pos, step.root)
		end
	end
end

function on_input(self, action_id, action)
	if action.pressed and not PLAYING then
		start_game(self)
	end
	if PLAYING then
		local pos = go.get_position("ball")
		pos.x = (action.x - (DISPLAY_WIDTH * 0.5)) / 65
		go.set_position(pos, "ball")
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.other_group == hash("death") then
			reset_game(self)
		elseif message.other_group == hash("bonus") then
			msg.post(message.other_id, "disable")
			increase_score()
		end
	end
end


