local DISPLAY_WIDTH = tonumber(sys.get_config("display.width"))

-- size of a step
local STEP_X = 7
local STEP_Y = 0.7
local STEP_Z = 3

-- number of steps to spawn
local STEPS = 14

local SPEED = 2

-- the direction vector used when arranging the steps on init and also moving on update()
local DIRECTION = vmath.vector3(0, STEP_Y, -STEP_Z)

local function set_random_spike_position(spike)
	local spike_pos = go.get_position(spike)
	-- STEP_X is width of a step
	-- math.random() gives value between 0.0 and 1.0
	-- (math.random() - 0.5) gives value between -0.5 and 0.5
	-- (math.random() - 0.5) * STEP_X gives a value which covers the entire step all the way to the edge
	-- (math.random() - 0.5) * STEP_X * 0.8 leaves a little margin at the edges of the stairs
	spike_pos.x = (math.random() - 0.5) * STEP_X * 0.8
	go.set_position(spike_pos, spike)
end

local function enable_random_spikes(spikes)
	-- disable all spikes
	for i=1,#spikes do
		msg.post(spikes[i], "disable")
	end
	-- enable up to 4 spikes
	for i=1,4 do
		msg.post(spikes[math.random(1, #spikes)], "enable")
	end
end

function init(self)
	-- "seed" the random number generator (used for randomized spike positions)
	math.randomseed(os.time())

	msg.post(".", "acquire_input_focus")			-- tell the engine this script wants to receive user input
	msg.post("@render:", "use_camera_projection")	-- tell the render script to use the projection from the camera
	msg.post("camera", "acquire_camera_focus")		-- activate the camera

	-- get the ball, color it blue and bounce it
	local ball = hash("/ball")
	go.set(msg.url(nil, ball, "model"), "tint", vmath.vector4(0,0,1,1))
	go.animate(ball, "position.y", go.PLAYBACK_LOOP_PINGPONG, 2, go.EASING_INQUAD, 1.0 / SPEED)
	
	-- steps are stored here for later use in update()
	self.steps = {}

	-- create steps
	for i=1,STEPS do
		-- create staircase step objects and position them according to the size of the steps
		local pos = DIRECTION * i
		local ids = collectionfactory.create("#stepfactory", pos)

		-- get root game object
		-- this is the one we are moving in update()
		local root = ids[hash("/root")]

		-- get the actual step
		-- tint it green
		local step = ids[hash("/step")]
		go.set(msg.url(nil, step, "model"), "tint", vmath.vector4(0.3,1,0.2,1))

		-- get all spikes
		-- tint them red
		local spikes = {}
		for i=1,8 do
			local spike = ids[hash("/spike"..i)]
			go.set(msg.url(nil, spike, "model"), "tint", vmath.vector4(0.9,0.2,0,1))
			spikes[i] = spike
		end
		
		-- save game object references for access in update()
		self.steps[i] = {
			root = root,
			spikes = spikes
		}

		-- initial random spike position
		enable_random_spikes(spikes)
	end
end


function update(self, dt)
	-- move each step and reset position to above top of screen if outside of view
	for i,step in ipairs(self.steps) do
		local pos = go.get_position(step.root)
		pos = pos - DIRECTION * SPEED * dt

		-- reset position of step and set new random spike position?
		if pos.y < -1 then
			pos = pos + DIRECTION * STEPS
			enable_random_spikes(step.spikes)
		end

		go.set_position(pos, step.root)
	end
end

function on_input(self, action_id, action)
	local pos = go.get_position("ball")
	pos.x = (action.x - (DISPLAY_WIDTH * 0.5)) / 65
	if pos.x > STEP_X * 0.5 then pos.x = STEP_X * 0.5 end
	if pos.x < -STEP_X * 0.5 then pos.x = -STEP_X * 0.5 end
	go.set_position(pos, "ball")
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
	end
end


